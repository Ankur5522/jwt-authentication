openapi: 3.0.0
info:
  title: JWT Authentication
  description: This is the Swagger docs for JWT Authentication Apis.
  contact:
    email: ac7351318355@gmail.com
  version: 1.0.0
servers:
  - url: 'http://localhost:5000/'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        name:
          type: string
    TokenBlacklist:
      type: object
      properties:
        token:
          type: string
        expiresAt:
          type: string
paths:
  /user/login:
    post:
      summary: User login
      tags: [User]
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
              example:
                email: example@example.com
                password: password123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  value:
                    _id: 1234567890
                    email: example@example.com
                    name: John Doe
          links:
            GetUserByUserId:
              operationId: getUser
              parameters:
                userId: '$response.body#/_id'
              description: >
                The `id` value returned in the response can be used as
                the `userId` parameter in `GET /users/getUser/{id}`.
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Something went wrong
  /user/register:
    post:
      summary: User registration
      tags: [User]
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                confirmPassword:
                  type: string
              example:
                firstName: John
                lastName: Doe
                email: example@example.com
                password: password123
                confirmPassword: password123
      responses:
        '201':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  value:
                    _id: 1234567890
                    email: example@example.com
                    name: John Doe
        '400':
          description: Bad request
        '409':
          description: User already exists
        '500':
          description: Something went wrong
  /user/resetPassword:
    post:
      summary: Reset user password
      tags: [User]
      security:
        - bearerAuth: []
      requestBody:
        description: User password reset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
              example:
                oldPassword: oldpassword123
                newPassword: newpassword123
      responses:
        '200':
          description: Successfully reset password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  value:
                    _id: 1234567890
                    email: example@example.com
                    name: John Doe
        '500':
          description: Something went wrong
  /user/getUser/{id}:
    get:
      summary: Get user by ID
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to retrieve
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  value:
                    _id: 1234567890
                    email: example@example.com
                    name: John Doe
        '404':
          description: User not found
  /auth/google:
    get:
      summary: Initiate Google OAuth
      description: Redirects the user to the Google OAuth login page for authentication.
      tags: [Authentication]
      responses:
        '302':
          description: Redirect to Google OAuth login page
          headers:
            Location:
              description: URL to the Google OAuth login page
              schema:
                type: string
              example: "http://localhost:5000/auth/google"  # Example URL to test the API

  /auth/google/success:
    get:
      summary: Google OAuth Success
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful Google OAuth authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  value:
                    _id: 1234567890
                    email: example@example.com
                    name: John Doe

  /auth/google/failure:
    get:
      summary: Google OAuth Failure
      security:
        - bearerAuth: []
      responses:
        '500':
          description: Something went wrong
  /user/logout:
    get:
      summary: User Logout
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Logged out successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              headers:
                WWW-Authenticate:
                  description: Error message
                  schema:
                    type: string
        '500':
          description: Something went wrong


